{"version":3,"file":"static/js/319.5b1829ab.chunk.js","mappings":"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","sources":["components/shared/Button/Button.styled.js","components/shared/Button/Button.jsx","components/shared/InputName/InputName.styled.js","components/shared/InputName/InputName.jsx","components/modules/ContactForm/ContactForm.styled.js","components/modules/ContactForm/ContactForm.jsx","redux/contacts/selectors.js","components/modules/Filter/Filter.styled.js","components/modules/Filter/Filter.jsx","components/modules/ContactList/ContactListItem/ContactListItem.styled.js","components/modules/ContactList/ContactListItem/ContactListItem.jsx","components/modules/ContactList/ContactList.styled.js","components/modules/ContactList/ContactList.jsx","components/pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonDefault = styled.button`\n  margin-top: 8px;\n  padding: 8px 24px;\n  border: 0;\n  border-radius: 2px;\n  font-size: 14px;\n  font-weight: 500;\n  font-family: inherit;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  &:hover {\n    background-color: #1976d2;\n    color: #fff;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ButtonDefault } from './Button.styled';\n\nconst Button = ({ type, onClick, text }) => {\n  return (\n    <ButtonDefault type={type} onClick={onClick}>\n      {text}\n    </ButtonDefault>\n  );\n};\n\nexport default Button;\n\nButton.propType = {\n  type: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const InputNameComponent = styled.p`\n  margin-top: 8px;\n  margin-bottom: 4px;\n`;\n","import PropTypes from 'prop-types';\nimport { InputNameComponent } from './InputName.styled';\n\nconst InputName = ({ text }) => {\n  return <InputNameComponent>{text}</InputNameComponent>;\n};\n\nexport default InputName;\n\nInputName.propType = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\n\nexport const Title = styled.h1`\n  margin: 20px;\n`;\n\nexport const FormAdd = styled(Form)`\n  height: 100vh;\n  float: left;\n  margin-right: 20px;\n  margin-left: 20px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n`;\n\nexport const ErrorsMessage = styled.div`\n  margin-top: 5px;\n  color: red;\n`;\n\nexport const Section = styled.div`\n  width: 320px;\n`;\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport 'yup-phone';\nimport { addContact } from '../../../redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport Button from '../../shared/Button/Button';\nimport InputName from '../../shared/InputName/InputName';\nimport {\n  Title,\n  Label,\n  FormAdd,\n  ErrorsMessage,\n  Section,\n} from './ContactForm.styled';\n\nexport const schema = Yup.object({\n  name: Yup.string().min(2).max(25).required(),\n  number: Yup.string().min(6).max(12).required(),\n});\n\nconst ContactForm = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const handleaddContact = (values, { resetForm }) => {\n    const { name, number } = values;\n    console.log(name.value, number.value);\n\n    let addedContact = {\n      name: name,\n      number: number,\n      id: nanoid(),\n    };\n\n    let isAdded = true;\n\n    contacts.map(contact => {\n      if (contact.name === name) {\n        alert(`${name} is already in contacts`);\n        return (isAdded = false);\n      }\n      return isAdded;\n    });\n\n    if (isAdded === true) {\n      dispatch(addContact(addedContact));\n      console.log(addedContact);\n    }\n\n    resetForm();\n  };\n\n  const initialValue = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <>\n      <Section>\n        <Title>Phonebook</Title>\n        <Formik\n          validationSchema={schema}\n          initialValues={initialValue}\n          onSubmit={handleaddContact}\n        >\n          {({ errors, touched }) => (\n            <FormAdd autoComplete=\"off\">\n              <Label htmlFor=\"name\">\n                <InputName text={'Name'} />\n                <Field\n                  id=\"name\"\n                  type=\"text\"\n                  name=\"name\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                />\n              </Label>\n              {errors.name && touched.name ? (\n                <ErrorsMessage>{errors.name}</ErrorsMessage>\n              ) : null}\n              <Label htmlFor=\"number\">\n                <InputName text={'Number'} />\n                <Field\n                  id=\"number\"\n                  type=\"tel\"\n                  name=\"number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                />\n              </Label>\n              {errors.name && touched.number ? (\n                <ErrorsMessage>{errors.number}</ErrorsMessage>\n              ) : null}\n              <Button type={'submit'} text={'Add contact'} />\n            </FormAdd>\n          )}\n        </Formik>\n      </Section>\n    </>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propType = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","export const selectItems = state => state.items;\n\nexport const selectSearchValue = state => state.searchValue;\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  padding-left: 20px;\n  padding-bottom: 20px;\n  overflow: hidden;\n  border-left: 1px solid #ccc;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setSearchValue } from '../../../redux/contacts/searchSlice';\nimport InputName from '../../shared/InputName/InputName';\nimport { FilterWrapper } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleSearch = e => {\n    dispatch(setSearchValue(e.currentTarget.value));\n  };\n  return (\n    <FilterWrapper>\n      <h2>Contacts</h2>\n      <label>\n        <InputName text={'Find contacts by name'} />\n        <input type=\"text\" onChange={handleSearch} />\n      </label>\n    </FilterWrapper>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ContactName = styled.h2`\n    margin: 0;\n    font-size: 20px;\n`;\n\nexport const ContactNumber = styled.p`\n    margin: 0;\n`;","import PropTypes from 'prop-types';\nimport Button from '../../../shared/Button/Button';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../../../redux/contacts/operations';\nimport { ContactName, ContactNumber } from './ContactListItem.styled';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <li>\n      <ContactName>{name}</ContactName>\n      <ContactNumber>{number}</ContactNumber>\n      <Button type={'button'} onClick={handleDelete} text={'Delete'} />\n    </li>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propType = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const PhoneBookList = styled.ul`\n  margin: 0;\n  padding-left: 0;\n  list-style: none;\n  overflow: hidden;\n  border-left: 1px solid #ccc;\n  padding-bottom: 30px;\n`;\n\nexport const Contact = styled.div`\n  border-bottom: 1px solid #ccc;\n  padding: 20px;\n`;\n\nexport const ListMessage = styled.p`\n  display: inline-block;\n  padding: 20px;\n`;\n\nexport const Loader = styled.p`\n  display: inline-block;\n  padding: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectItems } from '../../../redux/contacts/selectors';\nimport { selectSearchValue } from '../../../redux/contacts/selectors';\nimport Filter from '../Filter/Filter';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport {\n  PhoneBookList,\n  Contact,\n  ListMessage,\n  Loader,\n} from './ContactList.styled';\n\nconst ContactList = ({ contacts, deleteContact, findContact }) => {\n  const { isLoading } = useSelector(selectItems);\n  const filter = useSelector(selectSearchValue);\n  let filteredContacts = contacts;\n\n  if (filter.searchValue.toLowerCase()) {\n    filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.searchValue.toLowerCase())\n    );\n  }\n  return (\n    <>\n      <Filter findContact={findContact}></Filter>\n      {isLoading && <Loader className=\"inputName\">Loading contacts...</Loader>}\n      {!contacts.length && (\n        <ListMessage className=\"inputName\">\n          Your contactlist is empty\n        </ListMessage>\n      )}\n      {!filteredContacts.length && Boolean(contacts.length) && (\n        <ListMessage className=\"inputName\">No contacts found</ListMessage>\n      )}\n      <PhoneBookList>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <Contact key={id}>\n              <ContactListItem\n                id={id}\n                name={name}\n                number={number}\n                deleteContact={deleteContact}\n              />\n            </Contact>\n          );\n        })}\n      </PhoneBookList>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propType = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n  deleteContact: PropTypes.func.isRequired,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from '../modules/ContactForm/ContactForm';\nimport ContactList from '../modules/ContactList/ContactList';\nimport { selectItems } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { HelmetProvider } from 'react-helmet-async';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const { contacts, error } = useSelector(selectItems);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <HelmetProvider>\n        <title>Contacts</title>\n      </HelmetProvider>\n      <ContactForm contacts={contacts} />\n      <ContactList contacts={contacts} error={error} />{' '}\n    </main>\n  );\n}\n"],"names":["ButtonDefault","styled","Button","type","onClick","text","propType","PropTypes","InputNameComponent","InputName","Title","FormAdd","Form","Label","ErrorsMessage","Section","schema","Yup","name","min","max","required","number","ContactForm","contacts","dispatch","useDispatch","validationSchema","initialValues","onSubmit","values","resetForm","console","log","value","addedContact","id","nanoid","isAdded","map","contact","alert","addContact","errors","touched","autoComplete","htmlFor","title","pattern","isRequired","selectItems","state","items","selectSearchValue","searchValue","FilterWrapper","onChange","e","setSearchValue","currentTarget","ContactName","ContactNumber","ContactListItem","deleteContact","PhoneBookList","Contact","ListMessage","Loader","ContactList","findContact","isLoading","useSelector","filter","filteredContacts","toLowerCase","includes","className","length","Boolean","Contacts","error","useEffect","fetchContacts"],"sourceRoot":""}